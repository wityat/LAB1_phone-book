on:
  push:
    branches: 
      - main

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Add environment variables to test.env!
        run: |
          echo DATABASE=postgres >> test.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> test.env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> test.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> test.env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> test.env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> test.env

          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> test.env
          echo SERVER_HOST=${{ secrets.SERVER_HOST }} >> test.env

          echo TG_TOKEN=${{ secrets.TG_TOKEN }} >> test.env
          echo BOT_IMG=${{ secrets.BOT_IMG }} >> test.env

      - name: Log in to GitHub Packages
        run: docker login docker.pkg.github.com -u wityat -p ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ secrets.BOT_IMG }}|| true
      - name: Build images
        run: docker-compose -f docker-compose-ci-test.yml build
      - name: Push images
        run: | 
          docker push ${{ secrets.BOT_IMG }}


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to test.env!
        run: |
          echo DATABASE=postgres >> test.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> test.env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> test.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> test.env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> test.env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> test.env

          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> test.env
          echo SERVER_HOST=${{ secrets.SERVER_HOST }} >> test.env

          echo TG_TOKEN=${{ secrets.TG_TOKEN }} >> test.env
          echo BOT_IMG=${{ secrets.BOT_IMG }} >> test.env
      - name: "deploy"
        run: |
          mkdir -p "$HOME/.ssh"
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY_TEST }}" > "$HOME/.ssh/id_rsa"
          chmod 600 "$HOME/.ssh/id_rsa"
          eval $(ssh-agent)
          ssh-add "$HOME/.ssh/id_rsa"
          echo "Add known hossts"
          sudo printf '%s %s\n' "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}" "${{ secrets.SSH_PUBLIC_KEY_TEST }}" > sudo /etc/ssh/ssh_known_hosts
          scp  -i "$HOME/.ssh/id_rsa" -o StrictHostKeyChecking=no -r ./test.env ./docker-compose-test.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/bot/
          ssh -q -t -i "$HOME/.ssh/id_rsa" \
              -o UserKnownHostsFile=/dev/null \
              -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
          cd /home/${{ secrets.SERVER_USER }}/bot/
          echo ${{ secrets.SERVER_PASS }} | sudo -S docker login docker.pkg.github.com -u wityat -p ${{ secrets.GITHUB_TOKEN }}
          sudo docker pull ${{ secrets.BOT_IMG }}
          sudo docker-compose -f docker-compose-test.yml up -d
          sudo docker rmi $(sudo docker images -f dangling=true -q)|| true
          ENDSSH
